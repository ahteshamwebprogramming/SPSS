//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SPSSUploadTest.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SPSSTestEntities : DbContext
    {
        public SPSSTestEntities()
            : base("name=SPSSTestEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ProjectName> ProjectNames { get; set; }
        public virtual DbSet<ProjectsValue> ProjectsValues { get; set; }
        public virtual DbSet<ProjectVariable> ProjectVariables { get; set; }
        public virtual DbSet<LoginDetail> LoginDetails { get; set; }
        public virtual DbSet<RoleMaster> RoleMasters { get; set; }
        public virtual DbSet<UserRoleMapping> UserRoleMappings { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
    
        public virtual int DynamicTableStructure_New(Nullable<int> prjID)
        {
            var prjIDParameter = prjID.HasValue ?
                new ObjectParameter("PrjID", prjID) :
                new ObjectParameter("PrjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DynamicTableStructure_New", prjIDParameter);
        }
    
        public virtual int INSERTDynamicTableValues(string query)
        {
            var queryParameter = query != null ?
                new ObjectParameter("query", query) :
                new ObjectParameter("query", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERTDynamicTableValues", queryParameter);
        }
    
        public virtual int deleteVariableValues(Nullable<int> projectId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteVariableValues", projectIdParameter);
        }
    
        public virtual int fetchNewCreatedDynamicTable(string tblName)
        {
            var tblNameParameter = tblName != null ?
                new ObjectParameter("tblName", tblName) :
                new ObjectParameter("tblName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("fetchNewCreatedDynamicTable", tblNameParameter);
        }
    
        public virtual ObjectResult<getProjects_Result> getProjects()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getProjects_Result>("getProjects");
        }
    
        public virtual ObjectResult<GetRecordsCount_Result> GetRecordsCount(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRecordsCount_Result>("GetRecordsCount", idParameter);
        }
    }
}
